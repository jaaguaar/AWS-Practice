AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Stack to create a VPC, public subnet, Free Tier EC2
  instance, and an RDS database.

Parameters:
  ProjectName:
    Type: String
    Description: The project name, used as a prefix for resource names.
  Environment:
    Type: String
    Default: dev
    Description: The environment (e.g., dev, prod).
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair for SSH access.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64
  DBUsername:
    Type: String
    Description: The master username for the RDS database.
    NoEcho: true
  DBPassword:
    Type: String
    Description: The master password for the RDS database.
    NoEcho: true
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must be between 8 and 41 alphanumeric characters.

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-subnet

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-rt

  # First private subnet in AZ1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-subnet-1

  # Second private subnet in AZ2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-subnet-2

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-db-subnet-group

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # VPC Endpoint for S3
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${Environment}-bucket
              - !Sub arn:aws:s3:::${ProjectName}-${Environment}-bucket/*

  # Security group for EC2 instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 176.100.4.31/32 # Allow SSH or specific IP
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ec2-sg

  # Security group for RDS instance
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 instance access to RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433 # MSSQL
          ToPort: 1433
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-rds-sg

  # Instance Role for EC2 instance
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ProjectName}-${Environment}-bucket
                  - !Sub arn:aws:s3:::${ProjectName}-${Environment}-bucket/*

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${Environment}-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-s3-bucket

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y mc
          sudo curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0 --runtime aspnetcore
          sudo export DOTNET_ROOT=$HOME/.dotnet
          sudo export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ec2-instance

  # RDS Database
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      Engine: sqlserver-ex
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-rds-instance

Outputs:
  InstancePublicIP:
    Description: The public IP address of the EC2 instance.
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub ${ProjectName}-${Environment}-PublicIP

  RDSInstanceEndpoint:
    Description: The endpoint of the RDS instance.
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub ${ProjectName}-${Environment}-RDSInstanceEndpoint

  S3BucketName:
    Description: The name of the S3 bucket.
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${ProjectName}-${Environment}-S3BucketName

  S3VPCEndpointId:
    Description: The ID of the S3 VPC endpoint.
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub ${ProjectName}-${Environment}-S3VPCEndpointId
